<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Freelance Mobile & Web Developer]]></title>
  <link href="http://filipemoreira.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://filipemoreira.com/"/>
  <updated>2012-03-15T15:31:13+01:00</updated>
  <id>http://filipemoreira.com/</id>
  <author>
    <name><![CDATA[Filipe Moreira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using pry with Rails]]></title>
    <link href="http://filipemoreira.com/blog/2012/03/09/using-pry-with-rails/"/>
    <updated>2012-03-09T10:00:00+01:00</updated>
    <id>http://filipemoreira.com/blog/2012/03/09/using-pry-with-rails</id>
    <content type="html"><![CDATA[<p><a href="http://pry.github.com/">Pry</a> is a IRB replacement with some very nice additional features. I'll link to additional resources at the end of this post.</p>

<p>Some of the additional features pry offers us include:</p>

<ul>
<li>Native syntax highlighting</li>
<li>Source and document browsing</li>
<li>Very flexible plugin architecture</li>
</ul>


<h2>Installation</h2>

<p>You can install and run pry with:</p>

<p>``` bash</p>

<pre><code>$ gem install pry
$ pry
</code></pre>

<p>```</p>

<p>They are a few ways to integrate pry with Rails but the one I like it the most came from <a href="http://twitter.com/fnando">@fnando</a> and originally from <a href="http://lucapette.com/pry/pry-everywhere/">Luca Pette</a>. Instead of patching of Rails initializer file, as described on the <a href="https://github.com/pry/pry/wiki/Setting-up-Rails-or-Heroku-to-use-Pry">Pry Wiki</a>, you can use the following method:</p>

<p>On IRB initialization file load Pry instead:</p>

<p>``` ruby ~/.irbrc</p>

<pre><code>begin
  require 'pry'
  Pry.start
  exit
rescue LoadError =&gt; e
  warn "=&gt; Unable to load pry"
end
</code></pre>

<p>```
This will load try to load Pry and if failed will print a message to stdout. The exit command after Pry's invocation is to avoid going back to IRB after the Pry session has finished.</p>

<p>The other part of the configuration is done on .pryrc</p>

<p>``` ruby ~/.pryrc</p>

<pre><code>if defined?(Rails)
  begin
    require "rails/console/app"
    require "rails/console/helpers"
  rescue LoadError =&gt; e
    require "console_app"
    require "console_with_helpers"
  end
end
</code></pre>

<p>```
This will allow you to continue using rails console but using pry instead of irb. I also like to use awesome_print so I added this to my config file:</p>

<p><code>ruby ~/.pryrc
begin
  require "awesome_print"
  Pry.config.print = proc {|output, value| Pry::Helpers::BaseHelpers.stagger_output("=&gt; #{value.ai}", output)}
rescue LoadError =&gt; err
   warn "=&gt; Unable to load awesome_print"
end
</code>
This will try to load awesome_print gem and failing to do that will print a message to stdout.</p>

<p>For more information on Pry see:</p>

<ul>
<li><a href="http://pry.github.com/">Pry's website</a></li>
<li><a href="http://railscasts.com/episodes/280-pry-with-rails">Pry Railscast</a></li>
<li><a href="https://github.com/filipeamoreira/dot-files/blob/master/_irbrc">My irbrc</a></li>
<li><a href="https://github.com/filipeamoreira/dot-files/blob/master/_pryrc">My pryrc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full text search with MongoDB]]></title>
    <link href="http://filipemoreira.com/blog/2012/01/24/full-text-search-with-mongodb/"/>
    <updated>2012-01-24T23:10:00+01:00</updated>
    <id>http://filipemoreira.com/blog/2012/01/24/full-text-search-with-mongodb</id>
    <content type="html"><![CDATA[<p>Recently I had to implement full text search on a Ruby on Rails application I was developing and based on my needs the easiest way to do it was building a helper array with the keywords needed and search using those keywords.</p>

<p>To illustrate this I've implemented stock tickers search using the awesome <a href="http://rstat.us/">rstat.us</a> project. Have a look at my <a href="https://github.com/filipeamoreira/rstat.us">Github fork.</a></p>

<p>``` ruby update.rb
class Update
...</p>

<pre><code># Adds stocks array mentions
key: stocks, Array, :default =&gt; []
</code></pre>

<p>  # Parses update text and build stocks array for simpler search
  def parse_symbols</p>

<pre><code>stocks = []
self.text.split(' ').each do |update|
  stocks &lt;&lt; update if update[0] == '$'
end
return stocks  
</code></pre>

<p>  end  <br/>
end
```</p>

<p>and then the controller:
``` ruby updates_controller.rb
class UpdatesController &lt; ApplicationController
...</p>

<pre><code>def create
  ...
  u = Update.new(:text =&gt; params[:text],
      :referral_id =&gt; params[:referral_id],
      :author =&gt; current_user.author,
      :twitter =&gt; do_tweet)

  u.stocks = u.parse_symbols
  ...
end
</code></pre>

<p>end
```
So it basically looks for words starting with $ and adds it to the stocks array. We can then search using</p>

<p>``` ruby Perform search using MongoDB built in text search</p>

<pre><code>Update.all(:conditions =&gt; {:stocks =&gt; '$goog'})
</code></pre>

<p>```</p>

<p>There are different solutions such as <a href="https://github.com/mauriciozaffari/mongoid_search">mongoid_search</a> that could be used but for my needs this approach works the best.</p>

<p>MongoDB gives a lot of flexibility for the developer and speeds things up. Of course there are trade-offs to be made while using so YMMV.</p>
]]></content>
  </entry>
  
</feed>
